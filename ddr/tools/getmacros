#!/bin/bash

###############################################################################
# Copyright (c) 2016, 2018 IBM Corp. and others
#
# This program and the accompanying materials are made available under
# the terms of the Eclipse Public License 2.0 which accompanies this
# distribution and is available at http://eclipse.org/legal/epl-2.0
# or the Apache License, Version 2.0 which accompanies this distribution
# and is available at https://www.apache.org/licenses/LICENSE-2.0.
#
# This Source Code may also be made available under the following Secondary
# Licenses when the conditions for such availability set forth in the
# Eclipse Public License, v. 2.0 are satisfied: GNU General Public License,
# version 2 with the GNU Classpath Exception [1] and GNU General Public
# License, version 2 with the OpenJDK Assembly Exception [2].
#
# [1] https://www.gnu.org/software/classpath/license.html
# [2] http://openjdk.java.net/legal/assembly-exception.html
#
# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
###############################################################################

debug=1

# Regular expressions used to process the defines and namespace annotations.
# These assume that all whitespace has been replaced by space characters.
id='[A-Za-z_][A-Za-z0-9_]*' # matches an identifier
default_regex="@ddr_namespace: *default"
map_to_type_regex="@ddr_namespace: *map_to_type="
flag_define_regex="^ *# *define +${id} *($|//|/\*)"
flag_undef_regex="^ *# *undef +${id} *($|//|/\*)"
value_define_regex="^ *# *define +${id} +[^ ].*($|//|/\*)"
include_guard_regex=".*_[Hh]([Pp][Pp])?_? *($|//|/\*)"

##
# Create a list of all c, h, cpp and hpp files that have simple (non function) macros within them.
##
get_all_annotated_files() {
	local annotated_files=$(find ${scan_dir} -type f | grep -E -e '\.[ch](pp)?$' | sort | xargs -d '\n' grep -lE '@ddr_(namespace|options):')
	echo "${annotated_files[@]}"
}

get_ddr_options() {
	# Check the file for "@ddr_options" or use the default settings.
	if grep -qE "@ddr_options: *valuesonly" ${f}; then
		addValues=1
		addFlags=0
	elif grep -qE "@ddr_options: *buildflagsonly" ${f}; then
		addValues=0
		addFlags=1
	elif grep -qE "@ddr_options: *valuesandbuildflags" ${f}; then
		addValues=1
		addFlags=1
	elif grep -qE "@ddr_namespace: *(default|map_to_type=)" ${f}; then
		addValues=1
		addFlags=0
	else
		addValues=0
		addFlags=0
	fi
}

begin_new_namespace() {
	temp_macro_file=${f}
	echo "@TYPE_${namespace}" >> "${temp_macro_file}"
}

end_previous_namespace() {
	namespace=''
}

set_default_namespace() {
	end_previous_namespace
	# Remove directory and extension; append 'Constants'.
	namespace=$(echo ${f} | sed -e 's|^.*/||' -e 's|\..*$||' -e 's|\(.\)|\U\1|' -e 's|$|Constants|')

	# Echo the type name into the output file.
	begin_new_namespace
}

set_map_to_type_namespace() {
	end_previous_namespace
	# Extract the type name.
	namespace=$(echo "${line}" | sed -e "s|^.*map_to_type=\(${id}\).*$|\1|")

	# Echo the type name into the output file.
	begin_new_namespace
}

define_flag_macro() {
	# Filter include guards and print the macro as a constant.
	if ! [[ ${line} =~ ${include_guard_regex} ]]; then
		if [[ 0 -eq ${#namespace} ]]; then
			set_default_namespace
		fi
		echo "${line}" | sed -e "s|^ *# *define  *\(${id}\).*$|#ifdef \1\n@MACRO_\1 1\n#endif|" >> "${temp_macro_file}"
	fi
}

undef_flag_macro() {
	if [[ 0 -eq ${#namespace} ]]; then
		set_default_namespace
	fi
	# Print a constant of 0 to the macro file.
	echo "${line}" | sed -e "s|^ *# *undef  *\(${id}\).*$|#ifndef \1\n@MACRO_\1 0\n#endif|" >> "${temp_macro_file}"
}

define_value_macro() {
	if [[ 0 -eq ${#namespace} ]]; then
		set_default_namespace
	fi
	# Print the macro.
	echo "${line}" | sed -e "s|^ *# *define  *\(${id}\) .*$|#ifdef \1\n@MACRO_\1 \1\n#endif|" >> "${temp_macro_file}"
}

##
# For each file, create another file with all the macro names in it. This file
# will include the source file, and be used to find macro values by running the
# C preprocessor on it. The results are added to the macroList file containing
# all macro info. The map to type policy associates all of the macros from a file
# with the type specified in the top of the header.
##
parse_namespace_policy_files() {
	# filenum is used to generate an enumerated include guard for each file.
	# The generated include guard is used in case the file path or name contains
	# characters that can't be part of a valid macro definition.
	local filenum=0

	for f in "${annotated_files[@]}"; do
		# Find ddr_options or use the default.
		get_ddr_options

		if [ ${addFlags} -ne 0 -o ${addValues} -ne 0 ]; then
			if [ $debug -ne 0 ]; then
				echo "Processing constants in '${f}' ..."
			fi

			# backup the original file (preserving its timestamp)
			mv ${f} ${f}.orig
			cp ${f}.orig ${f}

			# Inject repeated include guard and file delimiter
			(( filenum++ ))
			echo >> ${f}
			echo "#ifndef DDRGEN_F${filenum}_GUARD_H" >> ${f}
			echo "#define DDRGEN_F${filenum}_GUARD_H" >> ${f}
			echo "@DDRFILE_BEGIN ${f}" >> ${f}

			# Gather qualifying macro definitions.
			# We use sed to replace tabs with spaces and trim trailing spaces
			# to simplify patterns for grep and this script.
			sed -e 's/\t/ /g' -e 's/ *$//' < ${f} \
			| grep -E \
				-e '@ddr_namespace: *(default|map_to_type=)' \
				-e '^ *# *(define|undef) +[A-Za-z_]' \
			| while read -r line; do
				if [[ ${line} =~ ${default_regex} ]]; then
					# Change namespaces to "<FilenameConstants>".
					set_default_namespace
				elif [[ ${line} =~ ${map_to_type_regex} ]]; then
					# Change namespaces to specified pseudostructure.
					set_map_to_type_namespace
				elif [[ ${addValues} -ne 0 && ${line} =~ ${value_define_regex} ]]; then
					# Print a value define.
					define_value_macro
				elif [[ ${addFlags} -ne 0 && ${line} =~ ${flag_define_regex} ]]; then
					# Print a define flag as a constant of 1.
					define_flag_macro
				elif [[ ${addFlags} -ne 0 && ${line} =~ ${flag_undef_regex} ]]; then
					# Print an undef flag as a constant of 0.
					undef_flag_macro
				fi
			done
			end_previous_namespace

			# close repeated include guard and file delimiter
			echo "@DDRFILE_END ${f}" >> ${f}
			echo "#endif" >> ${f}
		fi
	done
}

restore_annotated_files() {
	echo "Restoring annotated files ..."
	for f in "${annotated_files[@]}"; do
		# Find ddr_options or use the default.
		get_ddr_options

		if [ ${addFlags} -ne 0 -o ${addValues} -ne 0 ]; then
			# restore the original file (retaining its timestamp)
			if [[ -e ${f}.orig ]]; then
				rm -f ${f}
				mv ${f}.orig ${f}
			fi
		fi
	done
}

# On Ctrl-C we want to restore any annotated files, and then exit
trap_int() {
	echo "Ctrl-C detected, exiting ..."
	restore_annotated_files
	exit
}

main() {
	# trap Ctrl-C and call trap_int()
	trap "trap_int" INT TERM

	annotated_files=( $(get_all_annotated_files) )

	# Overwrite the output file if it exists. This file will contain all of the final macro/type info.
	echo "" > ${macroList_file}

	echo "Annotating source files containing macros ..."
	# Deal with specific policies.
	parse_namespace_policy_files

	# preprocess annotated source code
	if [[ $(command -v gmake) ]]; then
		make=gmake
	else
		make=make
	fi
	${make} --ignore-errors --keep-going -C ${scan_dir} ddrgen

	# Build an awk filter that removes duplicate information.
	declare -ar dedup_filter=(
		'BEGIN { include = 0 }'
		'/^@DDRFILE_BEGIN / { file[$2] += 1 ; if (file[$2] == 1) { include = 1 } }'
		'{ if (include) { print } }'
		'/^@DDRFILE_END / { if (include) { print } ; include = 0 }'
	)

	echo "Scraping anotations from preprocessed code ..."
	find ${scan_dir} -type f -name '*.i' \
		| sort \
		| xargs -d '\n' grep -hE -e '^@(DDRFILE|MACRO|TYPE)_' \
		| awk "${dedup_filter[*]}" \
		> ${macroList_file}

	restore_annotated_files
}

# Command line arg 1.
scan_dir=${1}
macroList_file="${scan_dir}/macroList"

if [[ $(uname) == *"Win"* ]]; then
	export PATH="/c/dev/products/jtc-toolchain/java7/windows/mingw-msys/msys/1.0/bin:$PATH"
fi

main
